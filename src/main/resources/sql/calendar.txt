CREATE TABLE EVENT (
    event_id    NUMBER        NOT NULL,     -- 이벤트 id
    member_id    VARCHAR2(50)        NOT NULL,  -- member_id
    category_ID    NUMBER        NOT NULL,      -- category_id
    routine_ID    NUMBER        NOT NULL,
    title    VARCHAR2(100)        NOT NULL,
    location    VARCHAR2(255)        NULL,
    start_date    date        NULL,
    end_date    date        NULL,
    memo    VARCHAR2(255)        NULL,
    publice    NUMBER(1)    DEFAULT 0     -- 공개 여부 (0: 비공개, 1: 공개)
);

CREATE TABLE member (
    member_id    VARCHAR2(50)        NOT NULL,
    code_ID    NUMBER        NULL,
    EMAIL    VARCHAR2(200)        NOT NULL unique,
    NAME    VARCHAR2(100)        NOT NULL,
    PASSWORD    VARCHAR2(200)        NOT NULL,
    GENDER    VARCHAR2(100)        NOT NULL,
    BIRTH    DATE        NOT NULL,
    social NUMBER(1) default 0,     -- 소셜 로그인 여부(0: 일반, 1: 소셜)
    IMAGE    VARCHAR2(255)        NULL,
    BIO    VARCHAR2(255)        NULL
);

CREATE TABLE role (
    role_id NUMBER PRIMARY KEY,
    role_name VARCHAR2(50) UNIQUE NOT NULL
);

-- Role 테이블에 권한 추가
INSERT INTO role (role_id, role_name) VALUES (2, 'ROLE_ADMIN');     -- 관리자
INSERT INTO role (role_id, role_name) VALUES (1, 'ROLE_USER');      -- 사용자

CREATE TABLE routine (
    routine_ID    NUMBER        NOT NULL,
    member_id    VARCHAR2(50)        NOT NULL,
    routine_title    VARCHAR2(100)        NOT NULL,
    routine_start    DATE        NOT NULL,
    routine_end    DATE        NOT NULL,
    routine_pattern    VARCHAR2(50)        NOT NULL,
    routine_time    DATE        NULL,
    routine_manual    NUMBER        NULL
);

CREATE TABLE notification (
    notif_ID    NUMBER        NOT NULL,
    member_id    VARCHAR2(50)        NOT NULL,
    code_ID    NUMBER        NOT NULL,
    notif_type    VARCHAR2(50)        NULL,
    notif_message    VARCHAR2 (100)       NULL,
    notif_read    NUMBER(1)     DEFAULT 0       -- 0: 안읽음, 1: 읽음
);

CREATE TABLE calender (
    calen_ID    NUMBER        NOT NULL,
    member_id    VARCHAR2(50)        NOT NULL,
    calen_name    VARCHAR2(100)        NOT NULL,
    calen_detail    VARCHAR2(500)        NOT NULL,
    calen_color    VARCHAR2(20)        NULL,
    calen_create    DATE        NOT NULL,
    calen_update    DATE        NOT NULL
);

-- admin은 없어도 되는듯?

CREATE TABLE category (
    category_ID    NUMBER        NOT NULL,
    category_name    VARCHAR2(100)        NOT NULL
);

CREATE TABLE friend (
    code_ID    NUMBER        NOT NULL
);

ALTER TABLE EVENT ADD CONSTRAINT PK_EVENT PRIMARY KEY (
    event_id
);

ALTER TABLE member ADD CONSTRAINT PK_MEMBER PRIMARY KEY (
    member_id
);

ALTER TABLE routine ADD CONSTRAINT PK_ROUTINE PRIMARY KEY (
    routine_ID
);

ALTER TABLE notification ADD CONSTRAINT PK_NOTIFICATION PRIMARY KEY (
    notif_ID
);

ALTER TABLE calender ADD CONSTRAINT PK_CALENDER PRIMARY KEY (
    calen_ID
);

ALTER TABLE Admin ADD CONSTRAINT PK_ADMIN PRIMARY KEY (
    admin_Id
);

ALTER TABLE category ADD CONSTRAINT PK_CATEGORY PRIMARY KEY (
    category_ID
);

ALTER TABLE friend ADD CONSTRAINT PK_FRIEND PRIMARY KEY (
    code_ID
);

ALTER TABLE EVENT ADD CONSTRAINT FK_member_TO_EVENT_1 FOREIGN KEY (
    member_id
)
REFERENCES member (
    member_id
);

ALTER TABLE EVENT ADD CONSTRAINT FK_category_TO_EVENT_1 FOREIGN KEY (
    category_ID
)
REFERENCES category (
    category_ID
);

ALTER TABLE EVENT ADD CONSTRAINT FK_routine_TO_EVENT_1 FOREIGN KEY (
    routine_ID
)
REFERENCES routine (
    routine_ID
);

ALTER TABLE member ADD CONSTRAINT FK_friend_TO_member_1 FOREIGN KEY (
    code_ID
)
REFERENCES friend (
    code_ID
);

ALTER TABLE routine ADD CONSTRAINT FK_member_TO_routine_1 FOREIGN KEY (
    member_id
)
REFERENCES member (
    member_id
);

ALTER TABLE notification ADD CONSTRAINT FK_member_TO_notification_1 FOREIGN KEY (
    memberId
)
REFERENCES member (
    member_id
);

ALTER TABLE notification ADD CONSTRAINT FK_friend_TO_notification_1 FOREIGN KEY (
    code_ID
)
REFERENCES friend (
    code_ID
);

ALTER TABLE calender ADD CONSTRAINT FK_member_TO_calender_1 FOREIGN KEY (
    member_id
)
REFERENCES member (
    member_id
);

ALTER TABLE calender ADD CONSTRAINT FK_EVENT_TO_calender_1 FOREIGN KEY (
    event_id
)
REFERENCES EVENT (
    event_id
);

INSERT INTO member (member_id, code_id, email, name, password, gender, birth, image, bio, social)
VALUES ('java', 1, 'a@a.com', '홍길동', '$2a$10$Sd3oeSdhSqpQFw9Cko0.p.Pt7jmW.54ybTZVBPsHfnGngWGZzyKxu', 'male', sysdate, '안녕', '2', 2);
INSERT INTO member (member_id, code_id, email, name, password, gender, birth, image, bio, social)
VALUES ('davin', 2, 'd@a.com', '관리자', '$2a$10$Sd3oeSdhSqpQFw9Cko0.p.Pt7jmW.54ybTZVBPsHfnGngWGZzyKxu', 'female', sysdate, '안녕하세요', '2', 2);
commit;

-- member 테이블에 유니크 제약 조건 추가
ALTER TABLE member
ADD CONSTRAINT pk_member_id PRIMARY KEY (member_id);

-- role 테이블에 유니크 제약 조건 추가
ALTER TABLE role
ADD CONSTRAINT pk_role_id PRIMARY KEY (role_id);


CREATE TABLE member_role (
    member_id VARCHAR2(50),
    role_id NUMBER,
    PRIMARY KEY (member_id, role_id),
    CONSTRAINT fk_member_role_member FOREIGN KEY (member_id) REFERENCES member(member_id),
    CONSTRAINT fk_member_role_role FOREIGN KEY (role_id) REFERENCES role(role_id)
);

-- MemberRole 테이블에 사용자 권한 추가
INSERT INTO member_role (member_id, role_id) VALUES ('java', 1);  -- ROLE_USER
INSERT INTO member_role (member_id, role_id) VALUES ('davin', 2);  -- ROLE_MANAGER

-- 회원별 프로필 사진
CREATE TABLE member_img (
        memberimg_Id int not null,
        member_id VARCHAR2(50),
        img_path VARCHAR2(500),
        file_name VARCHAR2(500),
        constraint pk_member_img primary key(memberimg_Id),
        constraint fk_member_id FOREIGN KEY (member_id) REFERENCES member (member_id)
);

CREATE SEQUENCE seq_img
   START WITH 1
   INCREMENT BY 1
   NOCACHE
   NOCYCLE;

commit;

insert into category(category_id, category_name)
values(1, '공부');

insert into member(member_id, code_id, email, name, password, gender, birth, image, bio)
values(2, 1, 'd@d.com', '홍길동', '1234', '남자', sysdate, null, null);

insert into routine(routine_id, member_id, routine_title,
routine_start, routine_end, routine_pattern, routine_time, routine_manual)
values(123, 1, '루틴', sysdate, sysdate, '일어나기', sysdate, null);

insert into event(event_id, member_id, category_id, routine_id, title,
location, start_date, end_date, memo, all_day, publice)
values(1, 1, 1, 123, '여행', '안산', sysdate, sysdate, '놀러가자', 1, 1);

commit;

-- calender 테이블 event_id fk 설정했다면 삭제하세요
alter table calender drop CONSTRAINT FK_EVENT_TO_calender_1;

-- 컬럼 추가 (event에 calen_ID 추가 )
ALTER TABLE EVENT ADD calen_ID int;

-- 컬럼 삭제
ALTER TABLE calender drop column event_ID;

-- (변경) event 테이블에 calender 테이블 fk로 설정
ALTER TABLE event
ADD CONSTRAINT fk_calen_ID FOREIGN KEY (calen_ID)
REFERENCES calender(calen_ID);